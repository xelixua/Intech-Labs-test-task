package xyz.maksimenko.DAO.Impl;

import java.sql.SQLException;

import org.hibernate.Session;

import xyz.maksimenko.DAO.TokenDAO;
import xyz.maksimenko.javaeett.Token;
import xyz.maksimenko.javaeett.User;
import xyz.maksimenko.util.HibernateUtil;

public class TokenDAOImpl implements TokenDAO{

	public void addToken(Token token) throws SQLException {
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactory().openSession();
			session.beginTransaction();
			session.save("xyz.maksimenko.javaeett.Token", token);
			session.getTransaction().commit();
		} catch (Exception e){
			System.out.println("Cannot add token " + e);
		} finally {
			if(session != null && session.isOpen()){
				session.close();
			}
		}
	}

	public void updateToken(Token token) throws SQLException {
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactory().openSession();
			session.beginTransaction();
			session.update(token);
			session.getTransaction().commit();
		} catch (Exception e){
			System.out.println("Cannot update token " + e);
		} finally {
			if(session != null && session.isOpen()){
				session.close();
			}
		}
	}

	public void deleteToken(Token token) throws SQLException {
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactory().openSession();
			session.beginTransaction();
			session.delete(token);
			session.getTransaction().commit();
		} catch (Exception e){
			System.out.println("Cannot delete token " + e);
		} finally {
			if(session != null && session.isOpen()){
				session.close();
			}
		}
	}

	public Token getTokenById(Long tokenId) throws SQLException {
		Session session = null;
		Token token = null;
		
		try {
			session = HibernateUtil.getSessionFactory().openSession();
			token = session.load(Token.class, tokenId);
		} catch (Exception e){
			System.out.println("Cannot get token  by id" + e);
		} finally {
			if(session != null && session.isOpen()){
				session.close();
			}
		}
		
		return token;
	}

}
