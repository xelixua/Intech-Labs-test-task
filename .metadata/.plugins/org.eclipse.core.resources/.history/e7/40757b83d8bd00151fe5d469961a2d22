package xyz.maksimenko.DAO.Impl;

import java.sql.SQLException;
import java.util.Collection;
import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;

import xyz.maksimenko.DAO.TokenDAO;
import xyz.maksimenko.javaeett.Token;
import xyz.maksimenko.javaeett.User;
import xyz.maksimenko.util.HibernateUtil;

public class TokenDAOImpl implements TokenDAO{

	public void addToken(Token token) throws SQLException {
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactory().openSession();
			session.beginTransaction();
			session.save("xyz.maksimenko.javaeett.Token", token);
			session.getTransaction().commit();
		} catch (Exception e){
			System.out.println("Cannot add token " + e);
		} finally {
			if(session != null && session.isOpen()){
				session.close();
			}
		}
	}

	public void updateToken(Token token) throws SQLException {
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactory().openSession();
			session.beginTransaction();
			session.update(token);
			session.getTransaction().commit();
		} catch (Exception e){
			System.out.println("Cannot update token " + e);
		} finally {
			if(session != null && session.isOpen()){
				session.close();
			}
		}
	}
	
	@Override
	public void updateTokens(List<Token> tokens) throws SQLException {
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactory().openSession();
			session.beginTransaction();
			for(Token token:tokens) session.update(token);
			session.getTransaction().commit();
		} catch (Exception e){
			System.out.println("Cannot update tokens " + e);
		} finally {
			if(session != null && session.isOpen()){
				session.close();
			}
		}
	}

	public void deleteToken(Token token) throws SQLException {
		Session session = null;
		try {
			session = HibernateUtil.getSessionFactory().openSession();
			session.beginTransaction();
			session.delete(token);
			session.getTransaction().commit();
		} catch (Exception e){
			System.out.println("Cannot delete token " + e);
		} finally {
			if(session != null && session.isOpen()){
				session.close();
			}
		}
	}


	@Override
	public Collection getTokensForUser(User user) throws SQLException {
		Session session = null;
		List tokens = null;
		
		try {
			session = HibernateUtil.getSessionFactory().openSession();
			session.beginTransaction();
			Query query = session.createQuery("from Token where userId = :userId").setLong("userId", user.getUserId());
			tokens = (List<Collection>) query.list();
			session.getTransaction().commit();
		} catch (Exception e){
			System.out.println("Cannot get tokens by user" + e);
		} finally {
			if(session != null && session.isOpen()){
				session.close();
			}
		}
		
		return tokens;
	}
}
